{"version":3,"sources":["rLogin.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["rLogin","RLogin","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","options","rpc","30","31","supportedChains","App","useState","response","setResponse","id","text","log","setLog","account","setAccount","chainId","setChainId","logIt","length","className","onClick","connect","then","ethQuery","Eth","provider","accounts","net_version","catch","err","toString","localStorage","clear","disconnect","map","item","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6fAGaA,EAAS,IAAIC,IAAO,CAC/BC,eAAe,EACfC,gBAAiB,CACfC,cAAe,CACbC,QAASC,IACTC,QAAS,CACPC,IAAK,CACHC,GAAI,0BACJC,GAAI,sCAKZC,gBAAiB,CAAC,GAAI,M,kBCuDTC,MAlEf,WAAiB,IAAD,EACkBC,mBAAc,MADhC,mBACPC,EADO,KACGC,EADH,OAOQF,mBAAoB,CAAC,CAAEG,GAAI,EAAGC,KAAM,aAP5C,mBAOPC,EAPO,KAOFC,EAPE,OAQgBN,mBAAiB,IARjC,mBAQPO,EARO,KAQEC,EARF,OASgBR,mBAAiB,GATjC,mBASPS,EATO,KASEC,EATF,KAWRC,EAAQ,SAACP,GAAD,OAAkBE,EAAO,GAAD,mBAAKD,GAAL,CAAU,CAAED,OAAMD,GAAIE,EAAIO,YAsBhE,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,wCAIA,sBAAKA,UAAU,cAAf,UACE,6CACA,wBAAQC,QA5BQ,WACpBH,EAAM,iBACNxB,EAAO4B,UACJC,MAAK,SAACf,GACLU,EAAM,cACN,IAAMM,EAAW,IAAIC,IAAIjB,EAASkB,UAClCF,EAASG,WAAWJ,MAAK,SAACI,GAAD,OAAwBZ,EAAWY,EAAS,OACrEH,EAASI,cAAcL,MAAK,SAACb,GAAD,OAAgBO,EAAWP,MAEvDD,EAAYD,MAEbqB,OAAM,SAACC,GAAD,OAAgBZ,EAAMY,EAAIC,gBAiB/B,yBACA,wBAAQV,QAAS,kBAAMW,aAAaC,SAApC,iCAECzB,GACC,qCACE,wBAAQa,QAnBO,WACvBb,EAAS0B,aACTzB,EAAY,MACZS,EAAM,gBAgBE,wBACA,0CAAaJ,KACb,0CAAaE,WAKnB,sBAAKI,UAAU,MAAf,UACE,sCACA,6BACGR,EAAIuB,KAAI,SAACC,GAAD,OAAmB,6BAAmBA,EAAKzB,MAAfyB,EAAK1B,YAG9C,8DClDS2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4724fa28.chunk.js","sourcesContent":["import RLogin from '@rsksmart/rlogin'\nimport WalletConnectProvider from '@walletconnect/web3-provider'\n\nexport const rLogin = new RLogin({\n  cacheProvider: false,\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider,\n      options: {\n        rpc: {\n          30: 'https://did.rsk.co:4444',\n          31: 'https://did.testnet.rsk.co:4444'\n        }\n      }\n    }\n  },\n  supportedChains: [30, 31]\n})\n","import React, { useState } from 'react'\nimport './App.scss'\nimport { rLogin } from './rLogin'\nimport Eth from 'ethjs-query'\n\nfunction App () {\n  const [response, setResponse] = useState<any>(null)\n  interface logItem {\n    id: number\n    text: string,\n  }\n\n  const [log, setLog] = useState<logItem[]>([{ id: 0, text: 'Startup' }])\n  const [account, setAccount] = useState<string>('')\n  const [chainId, setChainId] = useState<number>(0)\n\n  const logIt = (text: string) => setLog([...log, { text, id: log.length }])\n\n  const handleConnect = () => {\n    logIt('connecting...')\n    rLogin.connect()\n      .then((response: any) => {\n        logIt('Connected!')\n        const ethQuery = new Eth(response.provider)\n        ethQuery.accounts().then((accounts: string[]) => setAccount(accounts[0]))\n        ethQuery.net_version().then((id: number) => setChainId(id))\n\n        setResponse(response)\n      })\n      .catch((err: Error) => logIt(err.toString()))\n  }\n\n  const handleDisconnect = () => {\n    response.disconnect()\n    setResponse(null)\n    logIt('Disconnect.')\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Testing rLogin Integrated!\n      </header>\n\n      <div className=\"interaction\">\n        <h2>Start here!</h2>\n        <button onClick={handleConnect}>Connect ;-)</button>\n        <button onClick={() => localStorage.clear()}>Clear Local Storage</button>\n\n        {response && (\n          <>\n            <button onClick={handleDisconnect}>Disconnect</button>\n            <p>Address: {account}</p>\n            <p>ChainId: {chainId}</p>\n          </>\n        )}\n      </div>\n\n      <div className=\"log\">\n        <h2>Log:</h2>\n        <ol>\n          {log.map((item: logItem) => <li key={item.id}>{item.text}</li>)}\n        </ol>\n      </div>\n      <footer>\n        Published version: 3\n      </footer>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}